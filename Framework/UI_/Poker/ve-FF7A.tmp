// PokerTableWnd.cpp : implementation file
//

#include "stdafx.h"
#include "..\..\Controls\MercuryGUI.h"

#include "ChildControls\ESChildControlButton.h"
#include "ChildControls\ESChildControlShortcutBtn.h"
#include "ChildControls\ESChildControlSlider.h"
#include "ChildControls\ESChildControlPreAction.h"
#include "ChildControls\ESChildControlActionPanel.h"
#include "ChildControls\ESChildControlTableCards.h"
#include "ChildControls\ESChildControlTable.h"
#include "ChildControls\ESChildControlSeat.h"
#include "ChildControls\ESChildControlChips.h"
#include "ChildControls\ESChildControlDealer.h"
#include "ChildControls\ESChildControlSeatProgressBar.h"

#include "..\..\Controls\ESItemsList.h"
#include "..\..\Image\ImageHelper.h"
#include "..\..\Path\Path.h"
#include "PokerTableWnd.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// PokerTableWnd

PokerTableWnd::PokerTableWnd() : MercuryBaseView(){
	m_bUseForegroundColor	= 0;
	m_crForeground			= RGB(0, 0, 0);
	m_nAlpha				= 50;
	m_pGUI					= PokerGUI::GetInstance();
	m_currentRound			= PokerRoundType::No;
	m_fZoomFactor			= 1.0f;
	m_seatPanelInfos		= NULL;
	m_nRegularThinkTimeSec	= 20;
	m_pHandler				= NULL;

	m_nCard1				= -1;
	m_nCard2				= -1;
	m_nCard3				= -1;
	m_nCard4				= -1;
	m_nCard5				= -1;

	m_nActiveSeat			= -1;
	m_nDealerSeat			= 0;
	m_nTotalPotAmount		= 0;
	m_nMainPotAmount		= 0;

	// Acceptable max players count. ####
	m_acceptebleMaxPlayersCount.Add(2);
	m_acceptebleMaxPlayersCount.Add(4);
	m_acceptebleMaxPlayersCount.Add(6);
	m_acceptebleMaxPlayersCount.Add(9);
	m_acceptebleMaxPlayersCount.Add(10);
	// #################################
	}

IMPLEMENT_DYNCREATE(PokerTableWnd, MercuryBaseView)

PokerTableWnd::~PokerTableWnd(){
	}

BEGIN_MESSAGE_MAP(PokerTableWnd, MercuryBaseView)
	ON_WM_LBUTTONDOWN	()
	ON_WM_LBUTTONDBLCLK	()
	ON_WM_LBUTTONUP		()
	ON_WM_SIZE			()
	ON_WM_MOUSEWHEEL	()
	ON_WM_MOUSEMOVE		()
	ON_WM_KEYDOWN		()
	ON_WM_TIMER			()
	ON_MESSAGE			(WM_ACTION_BUTTON_CLICK, OnActionButtonClick)
	ON_MESSAGE			(WM_SHORTCUT_BUTTON_CLICK, OnShortcutButtonClick)
	ON_MESSAGE			(WM_SLIDER_POS_CHANGED, OnSliderPosChanged)
	ON_MESSAGE			(WM_PREACTION_CHECKED, OnPreActionChecked)
//	ON_WM_SETCURSOR		()
END_MESSAGE_MAP()

BOOL 
PokerTableWnd::Create(LPCTSTR lpszClassName,
						LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect,
						CWnd* pParentWnd, UINT nID,
						CCreateContext* pContext /*= NULL*/){
	BOOL bRet =  CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect, pParentWnd, nID, pContext);
	if( bRet ){
		CreateChildControls();
		}
	return bRet;
	}

bool
PokerTableWnd::CreateChildControls(){
	CRect rcClient;
	GetClientRect(rcClient);

	// Action panel.
	ESChildControlActionPanel* pActionPanel = new ESChildControlActionPanel();
	CRect rcActionPanel = m_pGUI->m_rcActionPanel;
	AddChildControl(pActionPanel, CHILD_PokerActionPanel, rcActionPanel, NULL);

	// Table control.
	ESChildControlTable* pTable = new ESChildControlTable();
	AddChildControl(pTable, CHILD_PokerTable, CRect(0, 0, 1, 1), NULL);

	// Table cards control.
	ESChildControlTableCards* pTableCards = new ESChildControlTableCards();
	if( AddChildControl(pTableCards, CHILD_PokerTableCards, CRect(0, 0, 1, 1), pTable) ){
		float fPosX = (m_pGUI->m_ptTableCard1.x / ((float)m_pGUI->m_szDefWindowSize.cx));
		float fPosY = (m_pGUI->m_ptTableCard1.y / ((float)m_pGUI->m_szDefWindowSize.cy));
		float fCX	= ((m_pGUI->m_ptTableCard5.x - m_pGUI->m_ptTableCard1.x + m_pGUI->m_szCardDimension.cx) / ((float)m_pGUI->m_szDefWindowSize.cx));
		float fCY	= (m_pGUI->m_szCardDimension.cy / ((float)m_pGUI->m_szDefWindowSize.cy));

		pTableCards->SetLogicalPos	(fPosX, fPosY);
		pTableCards->SetLogicalSize	(fCX, fCY);
		}

	// Table main pot chips
	ESChildControlChips* pChips = new ESChildControlChips();
	if( AddChildControl(pChips, CHILD_SeatChips + 11, CRect(0, 0, 1, 1), pTable) ){
		float fPosX = (m_pGUI->m_ptMainPotChipsPos.x / ((float)m_pGUI->m_szDefWindowSize.cx));
		float fPosY = (m_pGUI->m_ptMainPotChipsPos.y / ((float)m_pGUI->m_szDefWindowSize.cy));
		float fCX	= (m_pGUI->m_szChipContainer.cx / ((float)m_pGUI->m_szDefWindowSize.cx));
		float fCY	= (m_pGUI->m_szChipContainer.cy / ((float)m_pGUI->m_szDefWindowSize.cy));

		pChips->SetLogicalPos	(fPosX, fPosY);
		pChips->SetLogicalSize	(fCX, fCY);
		}

	/*
	ESChildControlSeat* pSeat = new ESChildControlSeat();
	AddChildControl(pSeat, CHILD_Seat, CRect(0, 0, 1, 1), NULL);*/

	
/*
	// Pre-Actions
	AddPreActionButton(PreActionButton::PreAction_CheckFold, _T("Check/Fold"), true, false);
	AddPreActionButton(PreActionButton::PreAction_Check, _T("Check"), true, false);
	AddPreActionButton(PreActionButton::PreAction_Fold, _T("Fold"), true, false);
	AddPreActionButton(PreActionButton::PreAction_Call, _T("Call"), true, false);
	AddPreActionButton(PreActionButton::PreAction_CallAny, _T("Call Any"), true, false);
	AddPreActionButton(PreActionButton::PreAction_CallAnyCheck, _T("Call Any/Check"), true, false);
*/


	// Action buttons.
	AddActionButton(ActionButton::ButtonFold, _T("Fold"), 0, 0, false);
	AddActionButton(ActionButton::ButtonCall, _T("Call"), 100, 100, false);
	AddActionButton(ActionButton::ButtonBet, _T("Raise"), 100, 10000, false);

	// Shortcut buttons.
	AddShortcutButton(_T("BB"), 100, false);
	AddShortcutButton(_T("2BB"), 200, false);
	AddShortcutButton(_T("3BB"), 300, false);
	AddShortcutButton(_T("5BB"), 500, false);
	AddShortcutButton(_T("ALLIN"), -1, false);

	// Slider
	ShowSlider(100, 100, 1000, 10, false);

	/*
	// Pre-Actions
	AddPreActionButton(PreActionButton::PreAction_AutoMuck, 0, _T("Auto Muck"), true, false);
	AddPreActionButton(PreActionButton::PreAction_AutoPostBB, 0, _T("Auto Post Blind"), true, false);
	AddPreActionButton(PreActionButton::PreAction_SitOutNextBB, 0, _T("Sit Out Next BB"), true, false);
	AddPreActionButton(PreActionButton::PreAction_SitOutNextHand, 0, _T("Sit Out Next Hand"), true, false);


	AddPreActionButton(PreActionButton::PreAction_CheckFold, 0, _T("Check/Fold"), true, false);
	AddPreActionButton(PreActionButton::PreAction_Call, 0, _T("Call 0.1"), true, false);
	AddPreActionButton(PreActionButton::PreAction_CallAny, 0, _T("Call Any"), true, false);
	*/

	EnumerableObject<PokerTableSeatInfo> seats;
	PokerTableSeatInfo* pSeatInfo = NULL;


	CImage* pAvatarImage = new CImage();
	CLongBinary bin;
	Serializable::LoadImageData(_T("D:\\buckie1.jpg"), bin);

	for(int i=0; i<10; i++){
		pSeatInfo = new PokerTableSeatInfo();
		pSeatInfo->SetUserName	(_T("ZqrTalent"));
		pSeatInfo->SetActionName(_T("Call 0.4"));
		pSeatInfo->SetBalance	(5090);
		pSeatInfo->SetPotAmount	(1090);
		pSeatInfo->SetStatus	(PokerSeatStatus::Sitted);
		pSeatInfo->SetCard1		(11);
		pSeatInfo->SetCard2		(10);
		pSeatInfo->SetCard3		(9);
		pSeatInfo->SetCard4		(8);
		pSeatInfo->SetRankLevel	(4);
		pSeatInfo->SetAvatarData(&bin);
		seats.Add(pSeatInfo);
		}

	Setup			(10, &seats, NULL, PokerRoundType::No, NULL);
	SetTableCards	(10, 20, 30, 40, 50);
	return true;
	}

void
PokerTableWnd::OnPrePaint(CRect& rcRepaint){
	}

void 
PokerTableWnd::OnPaintClient(CDC* pDC, CRect* pRectDC, CRect* pRectClient){
	CRect rcClipDC = *pRectDC;
	CRect rcDestDC(-1*pRectClient->left, -1*pRectClient->top, pRectDC->Width(), pRectDC->Height());

	DrawFloor			(pDC, &rcDestDC, &rcClipDC);
	RedrawChildControls	(pDC, pRectDC, pRectClient);
	}

void
PokerTableWnd::OnShowWindow(BOOL bShow, UINT nStatus){
	CWnd::OnShowWindow(bShow, nStatus);
	}

void
PokerTableWnd::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags){
	CWnd::OnChar(nChar, nRepCnt, nFlags);
	}

void
PokerTableWnd::OnSize(UINT nType, int cx, int cy){
	CWnd::OnSize(nType, cx, cy);
	// Resize child controls.
	ResizeChildControls(cx, cy);
	}

BOOL 
PokerTableWnd::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt){
	/*
	_AFX_THREAD_STATE* pState = AfxGetThreadState();
	if( pState && m_pView )
		m_pView->SendMessage(pState->m_msgCur.message, pState->m_msgCur.wParam, pState->m_msgCur.lParam);
	*/
	return 1;
	}

void
PokerTableWnd::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags){
	_AFX_THREAD_STATE* pState = AfxGetThreadState();
	/*
	if( pState && m_pView )
		m_pView->SendMessage(pState->m_msgCur.message, pState->m_msgCur.wParam, pState->m_msgCur.lParam);
	else*/
	MercuryBaseView::OnKeyDown(nChar, nRepCnt, nFlags);
	}

UINT 
PokerTableWnd::OnGetDlgCode(){
	return DLGC_WANTALLKEYS|DLGC_WANTARROWS;
	}

BOOL
PokerTableWnd::OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message){
	return CWnd::OnMouseActivate(pDesktopWnd, nHitTest, message);
	}

void 
PokerTableWnd::OnMouseMove(UINT nFlags, CPoint point){
	MercuryBaseView::OnMouseMove(nFlags, point);
	}

BOOL 
PokerTableWnd::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message){
	return MercuryBaseView::OnSetCursor(pWnd, nHitTest, message);
	}

void 
PokerTableWnd::OnLButtonUp(UINT nFlags, CPoint point){
	/*
	// Seat panel click check. {{
	CRect rcSeat;
	int nSeat = 0;
	if( GetSeatPanelByPoint(point, nSeat, rcSeat) ){
		if( m_pHandler ){
			m_pHandler->OnSeatPanelClick(nSeat, GetSeatInfo(nSeat));
			}
		}
	// }}
	*/

	MercuryBaseView::OnLButtonUp(nFlags, point);
	}

void 
PokerTableWnd::OnLButtonDblClk(UINT nFlags, CPoint point){
	MercuryBaseView::OnLButtonDblClk(nFlags, point);
	}

void
PokerTableWnd::OnLButtonDown(UINT nFlags, CPoint point){
	m_bUseForegroundColor = FALSE;
	CRect rcRedraw (point.x - 40, point.y - 40, point.x + 40, point.y + 40);
	RedrawRect(rcRedraw, 1);
//	m_bUseForegroundColor = TRUE;

	//int nSeat = 0;
	//SetPotAmount(nSeat, GetPotAmount(nSeat) + 90);
	//Anim_CollectChips();

	/*
	CRect rcSeat;
	int nSeat = 0;
	if( GetSeatPanelByPoint(point, nSeat, rcSeat) ){
		SetupSeatTimer	(nSeat, 20, 0);
		SetActiveSeat	(nSeat, true, true);
		}*/

	MercuryBaseView::OnLButtonDown(nFlags, point);
	}

void
PokerTableWnd::OnTimer(UINT_PTR nIDEvent){
	if( nIDEvent == POKER_SEAT_ACTION_TIMER ){
		if( m_pTimerActiveSeat ){
			if( !m_pTimerActiveSeat->IncreaseTimer() ){
				KillTimer(POKER_SEAT_ACTION_TIMER);
				m_pTimerActiveSeat = NULL;
				// Time wasted.
				}
			else{
				//Invalidate_SeatTimer(GetSeatIndex(m_pTimerActiveSeat));
				}
			}
		else{
			KillTimer(POKER_SEAT_ACTION_TIMER);
			}
		}
	MercuryBaseView::OnTimer(nIDEvent);
	}

// ######################################################
//
//	Operations.
//
// ######################################################

bool
PokerTableWnd::Setup(int nMaxPlayerCt, 
					EnumerableObject<PokerTableSeatInfo>* seats, 
					EnumerableObject<PokerAvatar>* seatAvatars,
					PokerRoundType round, 
					CDWordArray *pListTableCards,
					CString	sAmountLabelSufix /*= _T("GEL")*/)
	{
	// Set max player count. ######
	EnumerableObject<SeatPanelInfo>* ppSeatPanelInfos[] = 
			{&m_pGUI->m_seatInfo2, &m_pGUI->m_seatInfo4, 
			&m_pGUI->m_seatInfo6, &m_pGUI->m_seatInfo9, &m_pGUI->m_seatInfo10};

	int nIndex = m_acceptebleMaxPlayersCount.IndexOf(nMaxPlayerCt);
	if( nIndex == -1 ){
		nMaxPlayerCt = 2;
		nIndex = 0;
		}
	m_nMaxPlayerCt		= nMaxPlayerCt;
	m_seatPanelInfos	= ppSeatPanelInfos[nIndex];
	// ############################

	// Set seat info. #############
	m_seats.RemoveAll();

	ESChildControlTable* pTable = (ESChildControlTable*)GetChildControl(CHILD_PokerTable);
	if( seats && seats->GetCount() > 0 ){
		for(int i=0; i<seats->GetCount(); i++){
			PokerTableSeatInfo* pSeatInfo = seats->GetAt(i);
			if( pSeatInfo ){
				PokerAvatar* pAvatarInfo = seatAvatars ? seatAvatars->GetAt(i) : NULL;
			//	pSeatInfo->SetAvatarData(pAvatarInfo ? &pAvatarInfo->m_binData : NULL);
				}

			// Create seat control. {{
			SeatPanelInfo*	pSeatPanelInfo	= m_seatPanelInfos->GetAt(i);
			if( pSeatPanelInfo ){
				CRect rcSeat;
				rcSeat.left		= pSeatPanelInfo->m_ptPos.x;
				rcSeat.top		= pSeatPanelInfo->m_ptPos.y;
				rcSeat.right	= rcSeat.left + m_pGUI->m_szSeatPanel.cx;
				rcSeat.bottom	= rcSeat.top + m_pGUI->m_szSeatPanel.cy;

				ESChildControlSeat* pSeat = new ESChildControlSeat();
				pSeat->SetSeatIndex	(i);
				pSeat->SetSeatInfo	(pSeatInfo, pSeatPanelInfo, false);
				pSeat->SetSeatActive(true, false);

				if( AddChildControlEx(pSeat, CHILD_Seat + i, rcSeat, pTable) ){
					// Add seat chips.{{
					CRect rcSeatChips;
					rcSeatChips.left	= pSeatPanelInfo->m_ptChipPos.x;
					rcSeatChips.top		= pSeatPanelInfo->m_ptChipPos.y;
					rcSeatChips.right	= rcSeatChips.left + m_pGUI->m_szChipContainer.cx;
					rcSeatChips.bottom	= rcSeatChips.top + m_pGUI->m_szChipContainer.cy;

					ESChildControlChips* pSeatChips = new ESChildControlChips();
					if( !AddChildControlEx(pSeatChips, CHILD_SeatChips + i, rcSeatChips, pTable) )
						delete pSeatChips;
					// }}

					// Add dealer button.{{
					CRect rcDealerBtn;
					rcDealerBtn.left	= pSeatPanelInfo->m_ptDealerButtonPos.x;
					rcDealerBtn.top		= pSeatPanelInfo->m_ptDealerButtonPos.y;
					rcDealerBtn.right	= rcDealerBtn.left + m_pGUI->m_szDealer.cx;
					rcDealerBtn.bottom	= rcDealerBtn.top + m_pGUI->m_szDealer.cy;

					ESChildControlDealer* pSeatDealer = new ESChildControlDealer();
					if( !AddChildControlEx(pSeatDealer, CHILD_SeatDealer + i, rcDealerBtn, pTable) )
						delete pSeatDealer;
					// }}

					// Add seat progress.{{
					CRect rcSeatProgress;
					rcSeatProgress.left		= pSeatPanelInfo->m_ptPos.x + m_pGUI->m_ptProgressBarPos.x;
					rcSeatProgress.top		= pSeatPanelInfo->m_ptPos.y + m_pGUI->m_ptProgressBarPos.y;
					rcSeatProgress.right	= rcSeatProgress.left + m_pGUI->m_szProgressBar.cx;
					rcSeatProgress.bottom	= rcSeatProgress.top + m_pGUI->m_szProgressBar.cy;

					ESChildControlSeatProgressBar* pSeatProgress = new ESChildControlSeatProgressBar();
					if( !AddChildControlEx(pSeatProgress, CHILD_SeatProgressBar + i, rcSeatProgress, pTable) )
						delete pSeatProgress;
					// }}
					}
				else
					delete pSeat;
				}
			// }}

			m_seats.Add(pSeatInfo);
			}
		seats->RemoveAll(false);
		}
	// ############################

	// Set current round. #########
	m_currentRound	= round;
	m_nCard1		= -1;
	m_nCard2		= -1;
	m_nCard3		= -1;
	m_nCard4		= -1;
	m_nCard5		= -1;

	if( pListTableCards ){
		int* ppTableCards[] = {&m_nCard1, &m_nCard2, &m_nCard3, &m_nCard4, &m_nCard5};
		for(int i=0; i<max(pListTableCards->GetCount(), 5); i++){
			*ppTableCards[i] = pListTableCards->GetAt(i);
			}
		}
	// ############################
	m_sAmountLabelSuffix = sAmountLabelSufix;
	return true;
	}

int
PokerTableWnd::GetMaxPotAmount(){
	int nMaxPotAmount = 0;
	for( int i=0; i<m_seats.GetCount(); i++ ){
		PokerTableSeatInfo* pSeatInfo = m_seats.GetAt(i);
		if( pSeatInfo ){
			nMaxPotAmount = max(nMaxPotAmount, pSeatInfo->GetPotAmount());
			}
		}
	return nMaxPotAmount;
	}

bool
PokerTableWnd::SetSeatAvatarInfo(int nSeat, PokerAvatar* pAvatarInfo, bool bRedraw /*= true*/){
	PokerTableSeatInfo* pSeatInfo = GetSeatInfo(nSeat);
	if( !pSeatInfo )
		return false;

	pSeatInfo->SetAvatarData(pAvatarInfo ? &pAvatarInfo->m_binData : NULL);
	if( bRedraw ){
		RedrawSeat(nSeat);
		}
	return true;
	}

bool
PokerTableWnd::SetSeatInfo(int nSeatIndex, PokerTableSeatInfo* pInfo, bool bRedraw /*= true*/){
	if( nSeatIndex < 0 || nSeatIndex >= m_nMaxPlayerCt )
		return false;

	if( !m_seats.SetAt(nSeatIndex, pInfo, true) ){
		return false;
		}
	
	if( bRedraw ){
		RedrawSeat(nSeatIndex);
		}
	return true;
	}

void
PokerTableWnd::SetRound(PokerRoundType round, CDWordArray *pListTableCards){
	m_currentRound = round;
	if( !pListTableCards ){
		SetTableCards(-1, -1, -1, -1, -1, false);
		return;
		}

	int *pCards[] = {&m_nCard1, &m_nCard2, &m_nCard3, &m_nCard4, &m_nCard5};
	int nLoop = 0;
	int nCt = min(pListTableCards->GetCount(), 5);

	while( nLoop < nCt ){
		*pCards[nLoop] = (int)pListTableCards->GetAt(nLoop);
		nLoop ++;
		}

	SetTableCards(m_nCard1, m_nCard2, m_nCard3, m_nCard4, m_nCard5, false);
	}

bool
PokerTableWnd::SetupSeatTimer(int nSeat, int nFullSeconds, int nSecondsPassed, bool bInvalidate /*= false*/, bool bStart /*= false*/){
	/*
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return false;

	pSeat->SetupTimer(nFullSeconds, nSecondsPassed);
	// Start or stop action timer. {{
	StartActionTimer(nSeat, bStart, bInvalidate);
	// }}
	*/
	return true;
	}

void
PokerTableWnd::SetDealerSeat(int nSeatIndex, bool bInvalidate){
	/*
	int nDealerSeatOld = m_nDealerSeat;
	m_nDealerSeat = nSeatIndex;
	if( bInvalidate ){
		Invalidate_DealerBtn(nDealerSeatOld);
		}*/
	}

void		
PokerTableWnd::SetTableCards(int nCard1, int nCard2, int nCard3, int nCard4 /*= -1*/, int nCard5 /*= -1*/, bool bInvalidate /*= true*/){
	m_nCard1 = nCard1;
	m_nCard2 = nCard2;
	m_nCard3 = nCard3;
	m_nCard4 = nCard4;
	m_nCard5 = nCard5;

	ESChildControlTableCards* pTableCards = (ESChildControlTableCards*)GetChildControl(CHILD_PokerTableCards);
	if( pTableCards ){
		pTableCards->SetCard1(m_nCard1);
		pTableCards->SetCard2(m_nCard2);
		pTableCards->SetCard3(m_nCard3);
		pTableCards->SetCard4(m_nCard4);
		pTableCards->SetCard5(m_nCard5);

		if( bInvalidate )
			pTableCards->Redraw();
		}
	}

// Set seat cards.
bool
PokerTableWnd::SetSeatCards(int nSeat, int nCard1, int nCard2, int nCard3, int nCard4, bool bInvalidate /*= true*/){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat ) return false;

	pSeat->SetCard1(nCard1);
	pSeat->SetCard2(nCard2);
	pSeat->SetCard3(nCard3);
	pSeat->SetCard4(nCard4);
	
	if( bInvalidate ){
		RedrawSeat(nSeat);
		}
	return true;
	}


void		
PokerTableWnd::SetTotalPotAmount(int nTotalPotAmount, bool bRedraw){
	int nAmountOld = m_nTotalPotAmount;
	m_nTotalPotAmount = nTotalPotAmount;

	if( bRedraw ){
		//Invalidate_TotalPot(nAmountOld);
		}
	}

void		
PokerTableWnd::SetMainPotAmount(int nMainPotAmount, bool bRedraw){
	int nAmountOld = m_nMainPotAmount;
	m_nMainPotAmount = nMainPotAmount;

	if( bRedraw ){
		//Invalidate_MainPotChips(nAmountOld);
		}
	}

// ######################################################
//
//	Drawing methods.
//
// ######################################################

bool
PokerTableWnd::DrawFloor(CDC* pDC, CRect* pRectDC, CRect* pClipRect){
	ASSERT( pRectDC && pClipRect );

	CImage* pImage = m_pGUI->m_pFloorBgImg;
	if( pImage ){
		bool bRet = ImgHlp::DrawImage32bpp_Repeated(pDC, pImage, *pRectDC, *pClipRect);
		return bRet;
		}
	return false;
	}

int
PokerTableWnd::GetPotAmount(int nSeat){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return 0;
	return pSeat->GetPotAmount();
	}

bool
PokerTableWnd::SetPotAmount(int nSeat, int nAmount, bool bRedraw /*= true*/){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return false;

	int nAmountOld = pSeat->GetPotAmount();
	pSeat->SetPotAmount(nAmount);
	if( bRedraw ){
		RedrawSeatChips(nSeat);
		}
	return true;
	}

int
PokerTableWnd::GetSeatTotalPot(int nSeat){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return 0;
	return pSeat->GetTotalPot();
	}

bool
PokerTableWnd::SetSeatTotalPot(int nSeat, int nAmount, bool bRedraw /*= true*/){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return false;

	int nAmountOld = pSeat->GetTotalPot();
	pSeat->SetTotalPot(nAmount);
	if( bRedraw ){
		RedrawSeat(nSeat);
		}
	return true;
	}

int
PokerTableWnd::GetBalance(int nSeat){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return 0;
	return pSeat->GetBalance();
	}

bool
PokerTableWnd::SetBalance(int nSeat, int nBalance, bool bRedraw /*= true*/){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return false;
	pSeat->SetBalance(nBalance);
	if( bRedraw ){
		RedrawSeat(nSeat);
		}
	return true;
	}

bool
PokerTableWnd::StartActionTimer(int nSeat, bool bStart /*= true*/, bool bInvalidate /*= false*/){
	PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
	if( !pSeat )
		return false;

	if( bStart ){ // Start
		// Stop recently active seat timer. {{
		if( m_pTimerActiveSeat ){
			int nSeatRecentlyActive = GetSeatIndex(m_pTimerActiveSeat);
			if( nSeatRecentlyActive != -1 ){
				m_pTimerActiveSeat->ActivateTimer(false);
				if( bInvalidate ){
					//Invalidate_SeatTimer(nSeatRecentlyActive);
					}
				}
			}
		// }}

		pSeat->ActivateTimer(true);
		m_pTimerActiveSeat = pSeat; // Save timer active seat.

		// Set action timer.
		SetTimer(POKER_SEAT_ACTION_TIMER, 1000, NULL);
		}
	else{ // Stop
		pSeat->ActivateTimer(false);
		m_pTimerActiveSeat = NULL;

		// Kill action timer.
		KillTimer(POKER_SEAT_ACTION_TIMER);
		}

	if( bInvalidate ){
		//Invalidate_SeatTimer(nSeat);
		}
	return true;
	}

void
PokerTableWnd::ClearPotAmounts(bool bRedraw /*= true*/){
	int nSeat		= 0;
	int nCt			= m_seats.GetCount();
	int nSumChips	= 0;

	while( nSeat < nCt ){
		PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
		if( !pSeat ){
			nSeat ++;
			continue;
			}
		int nAmountOld = pSeat->GetPotAmount();
		pSeat->SetTotalPot	(0);
		pSeat->SetPotAmount	(0);
		if( bRedraw ){
			RedrawSeatChips(nSeat);
			}
		nSeat ++;
		}
	}

void
PokerTableWnd::CollectChips(){
	/*
	int nSeat		= 0;
	int nCt			= m_seats.GetCount();
	int nSumChips	= 0;

	while( nSeat < nCt ){
		PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
		if( !pSeat ){
			nSeat ++;
			continue;
			}
		int nAmountOld = pSeat->GetPotAmount();
		pSeat->SetPotAmount(0);
		Invalidate_Chips(nSeat, nAmountOld);
		nSeat ++;
		}*/
	}

void
PokerTableWnd::Anim_CollectChips(){
	/*
	int nSeat		= 0;
	int nCt			= m_seats.GetCount();
	int nSumChips	= 0;

	while( nSeat < nCt ){
		PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
		if( !pSeat ){
			nSeat ++;
			continue;
			}
		int nAmountOld = pSeat->GetPotAmount();
		nSumChips += 100;
		pSeat->SetPotAmount(nAmountOld - 100);
		Invalidate_Chips(nSeat, nAmountOld);
		nSeat ++;
		}

	int nAmountOld = m_nMainPotAmount;
	m_nMainPotAmount += nSumChips;
	Invalidate_MainPotChips(nAmountOld);*/
	}

void
PokerTableWnd::ClearSeatCards(bool bRedraw){
	int nSeat		= 0;
	int nCt			= m_seats.GetCount();
	int nSumChips	= 0;

	while( nSeat < nCt ){
		PokerTableSeatInfo* pSeat = m_seats.GetAt(nSeat);
		if( !pSeat ){
			nSeat ++;
			continue;
			}
		SetSeatCards(nSeat, -1, -1, -1, -1, bRedraw);
		nSeat ++;
		}
	}

void
PokerTableWnd::ClearTableCards(bool bRedraw){
	SetTableCards(-1, -1, -1, -1, -1, bRedraw);
	}

bool
PokerTableWnd::GetSeatCardsRect(int nSeat, CRect& rcCards){
	if( !m_seatPanelInfos )
		return false;

	SeatPanelInfo* pSeatInfo = m_seatPanelInfos->GetAt(nSeat);
	if( !pSeatInfo ){
		return false;
		}

	rcCards.left	= ( m_pGUI->m_ptTablePos.x + pSeatInfo->m_ptPos.x + m_pGUI->m_ptSeatCard1Pos.x);
	rcCards.top		= ( m_pGUI->m_ptTablePos.y + pSeatInfo->m_ptPos.y + m_pGUI->m_ptSeatCard1Pos.y);
	rcCards.right	= rcCards.left + (m_pGUI->m_ptSeatCard2Pos.x - m_pGUI->m_ptSeatCard1Pos.x + m_pGUI->m_szCardDimension.cx);
	rcCards.bottom	= rcCards.top + m_pGUI->m_szCardDimension.cy;
	return true;
	}

bool
PokerTableWnd::GetSeatPanelByPoint(CPoint pt, int& nSeat, CRect& rcSeatPanel){
	if( !m_seatPanelInfos )
		return false;

	int				nLoop = 0;
	CRect			rcSeat(0, 0, 0, 0);
	SeatPanelInfo*	pSeatInfo;

	while( nLoop < m_seatPanelInfos->GetCount() ){
		pSeatInfo = m_seatPanelInfos->GetAt(nLoop);
		if( !pSeatInfo ){
			nLoop ++;
			continue;
			}

		rcSeat.left		= ( m_pGUI->m_ptTablePos.x + pSeatInfo->m_ptPos.x);
		rcSeat.top		= ( m_pGUI->m_ptTablePos.y + pSeatInfo->m_ptPos.y);
		rcSeat.right	= rcSeat.left + m_pGUI->m_szSeatPanel.cx;
		rcSeat.bottom	= rcSeat.top + m_pGUI->m_szSeatPanel.cy;
		if( rcSeat.PtInRect(pt) ){
			rcSeatPanel = rcSeat;
			nSeat		= nLoop;
			return true; // Seat found.
			}
		nLoop ++;
		}
	return false;
	}

bool
PokerTableWnd::IsTimerActive(int nSeat){
	PokerTableSeatInfo* pSeat = GetSeatInfo(nSeat);
	if( !pSeat ) return false;
	return pSeat->IsTimerActive();
	}

bool
PokerTableWnd::SetActiveSeat(int nSeatIndex, bool bActivateTimer /*= false*/, bool bInvalidate){
	int nActiveSeatOld	= m_nActiveSeat;
	m_nActiveSeat		= nSeatIndex;

	// Stop action timer on old seat. {{
	if( IsTimerActive(nActiveSeatOld) ){
		StartActionTimer(nActiveSeatOld, false, bInvalidate);
		}
	// }}

	if( bActivateTimer ){
		StartActionTimer(nSeatIndex, true);
		}

	if( bInvalidate ){
		RedrawSeat(nActiveSeatOld);
		RedrawSeat(nSeatIndex);
		}
	return true;
	}

SeatPanelInfo*
PokerTableWnd::GetSeatPanelInfo(int nSeat){
	return m_seatPanelInfos->GetAt(nSeat);
	}

bool
PokerTableWnd::AddActionButton(ActionButton type, CString sLabel, int nAmountMin, int nAmountMax, bool bInvalidate /*= true*/){
	ActionButtonInfo* pNew	= new ActionButtonInfo();
	pNew->nAmountMin		= nAmountMin;
	pNew->nAmount			= min(nAmountMin, nAmountMax);
	pNew->nAmountMax		= nAmountMax;
	pNew->sLabel			= sLabel;
	pNew->type				= type;
	m_listActionButtons.Add(pNew);
	int	nActionButtonCt		= m_listActionButtons.GetCount();

	ESChildControl*			pActionPanel	= GetChildControl(CHILD_PokerActionPanel);
	ESChildControlButton*	pActionButton	= new ESChildControlButton();
	
	CRect rcButton;
	rcButton.left		= (m_pGUI->m_ptActionButton.x) + (m_pGUI->m_szActionButton.cx + 5)*(nActionButtonCt-1);
	rcButton.top		= m_pGUI->m_ptActionButton.y;
	rcButton.right		= rcButton.left + m_pGUI->m_szActionButton.cx;
	rcButton.bottom		= rcButton.top + m_pGUI->m_szActionButton.cy;

	int nId				= CHILD_ActionButton + (nActionButtonCt - 1);
	pNew->nButtonId		= nId;
	if( AddChildControlEx(pActionButton, nId, rcButton, pActionPanel) ){
		pActionButton->SetText(sLabel, bInvalidate);
		return true;
		}
	else
		delete pActionButton;
	return false;
	}

bool
PokerTableWnd::ClearActionButtons(bool bInvalidate /*= true*/){
	int nCt		= m_listActionButtons.GetCount();
	int nLoop	= 0;

	while( nLoop < nCt ){
		ESChildControl*	pActionButton = GetChildControl(CHILD_ActionButton + nLoop);
		if( pActionButton ){
			if( bInvalidate ){
				pActionButton->SetVisible(false, bInvalidate);
				}
			RemoveChildControl(pActionButton);
			}
		nLoop ++;
		}
	m_listActionButtons.RemoveAll();
	return true;
	}

bool
PokerTableWnd::RedrawActionButtons(){
	int nCt = m_listActionButtons.GetCount();
	if( !nCt )
		return false;
	
	int nLoop = 0;
	while( nLoop < nCt ){
		ESChildControl*	pActionButton = GetChildControl(CHILD_ActionButton + nLoop);
		if( pActionButton )
			pActionButton->Redraw();
		nLoop ++;
		}
	return true;
	}

bool
PokerTableWnd::SetActionButtonInfo(int nIndex, CString sLabel, int nAmount, bool bInvalidate){
	ActionButtonInfo* pInfo = m_listActionButtons.GetAt(nIndex);
	if( !pInfo )
		return false;

	pInfo->sLabel	= sLabel;
	pInfo->nAmount	= nAmount;

	ESChildControlButton*	pActionButton = (ESChildControlButton*)GetChildControl(CHILD_ActionButton + nIndex);
	if( pActionButton ){
		pActionButton->SetText(sLabel, false);
		}

	if( bInvalidate ){
		RedrawActionButton(nIndex);
		}
	return true;
	}

bool
PokerTableWnd::RedrawActionButton(int nIndex){
	ActionButtonInfo* pInfo = m_listActionButtons.GetAt(nIndex);
	if( !pInfo )
		return false;

	ESChildControl*	pActionButton = GetChildControl(CHILD_ActionButton + nIndex);
	if( !pActionButton )
		return false;	

	pActionButton->Redraw();
	return true;
	}

bool
PokerTableWnd::ClearActionLabels(bool bRedraw){
	int nLoop	= 0;
	int nCt		= m_nMaxPlayerCt;

	while( nLoop < nCt ){
		PokerTableSeatInfo* pSeatInfo = GetSeatInfo(nLoop);
		if( pSeatInfo ){
			pSeatInfo->SetActionName(_T(""));
			pSeatInfo->SetLastAction(PokerActionTypes::NoAction);
			if( bRedraw ){
				RedrawSeatActionLabel(nLoop);
				}
			}
		nLoop ++;
		}
	return true;
	}

bool
PokerTableWnd::SetSeatActionLabel(int nSeat, CString sActionName, bool bInvalidate /*= true*/){
	PokerTableSeatInfo* pSeatInfo = GetSeatInfo(nSeat);
	if( !pSeatInfo )
		return false;
	pSeatInfo->SetActionName(sActionName);
	if( bInvalidate )
		RedrawSeatActionLabel(nSeat);
	return true;
	}

bool
PokerTableWnd::RedrawSeatActionLabel(int nSeat){
	PokerTableSeatInfo* pInfo = GetSeatInfo(nSeat);
	if( !pInfo )
		return false;

	SeatPanelInfo* pPanelInfo = GetSeatPanelInfo(nSeat);
	if( !pPanelInfo )
		return false;

	CSize szText;
	CString sAction = pInfo->GetActionName();
	ImgHlp::GetTextSize(&sAction, m_pGUI->m_pSeatLabelFont, szText);

	CRect rcActionLabel;
	rcActionLabel.left		= pPanelInfo->m_ptPos.x + m_pGUI->m_ptSeatActionLabel.x;
	rcActionLabel.top		= pPanelInfo->m_ptPos.y + m_pGUI->m_ptSeatActionLabel.y;
	rcActionLabel.right		= rcActionLabel.left + szText.cx;
	rcActionLabel.bottom	= rcActionLabel.top + szText.cy;

	if( !rcActionLabel.IsRectEmpty() ){
		RedrawRect(rcActionLabel, 1);
		return true;
		}
	return false;
	}

bool
PokerTableWnd::SetSeatStatus(int nSeat, PokerSeatStatus status, bool bInvalidate /*= true*/){
	PokerTableSeatInfo* pSeat = GetSeatInfo(nSeat);
	if( !pSeat ) 
		return false;
	pSeat->SetStatus(status);
	if( bInvalidate ){
		RedrawSeat(nSeat);
		}
	return true;
	}

PokerSeatStatus	
PokerTableWnd::GetSeatStatus(int nSeat){
	PokerTableSeatInfo* pSeat = GetSeatInfo(nSeat);
	if( !pSeat ) 
		return PokerSeatStatus::Empty;
	return pSeat->GetStatus();
	}

void
PokerTableWnd::SetSeatOffline(int nSeat, bool bOnline /*= false*/, bool bInvalidate /*= true*/){
	PokerTableSeatInfo* pSeat = GetSeatInfo(nSeat);
	if( !pSeat ) 
		return;

	pSeat->SetOffline(!bOnline);
	if( bInvalidate ){
		RedrawSeat(nSeat);
		}
	}

bool
PokerTableWnd::GetSeatOffline(int nSeat){
	PokerTableSeatInfo* pSeat = GetSeatInfo(nSeat);
	if( !pSeat ) 
		return false;
	return pSeat->IsOffline();
	}

LRESULT	
PokerTableWnd::OnActionButtonClick(WPARAM wParam, LPARAM lParam){
	int nId = (int)wParam - CHILD_ActionButton;
	if( nId >= m_listActionButtons.GetCount() )
		return 0L;

	ActionButtonInfo* pInfo = m_listActionButtons.GetAt(nId);
	if( !pInfo )
		return 0L;

	if( m_pHandler )
		m_pHandler->OnActionButtonClicked(pInfo);
	return 0L;
	}

LRESULT	
PokerTableWnd::OnShortcutButtonClick(WPARAM wParam, LPARAM lParam){
	int nId = (int)wParam - CHILD_ShortcutButton;
	if( nId >= m_listShortcutButtons.GetCount() )
		return 0L;

	ShortcutButtonInfo* pInfo = m_listShortcutButtons.GetAt(nId);
	if( !pInfo )
		return 0L;

	if( SetSliderAmount(pInfo->nAmount, true) ){
		// Set raise/bet button info. {{
		CString sLabel;
		if( m_currentRound == PokerRoundType::PreFlop )
			sLabel.Format(_T("Raise %d.%02d"), pInfo->nAmount/100, pInfo->nAmount%100);
		else
			sLabel.Format(_T("Bet %d.%02d"), pInfo->nAmount/100, pInfo->nAmount%100);
		SetActionButtonInfo(2, sLabel, pInfo->nAmount, true);
		// }}
		}
	return 0L;
	}

LRESULT
PokerTableWnd::OnSliderPosChanged(WPARAM wParam, LPARAM lParam){
	ESChildControlSlider* pSlider = (ESChildControlSlider*)lParam;
	if( !pSlider )
		return 0L;

	int nAmount = (int)wParam;
	// Set raise button info. {{
	CString sLabel;
	if( m_currentRound == PokerRoundType::PreFlop )
		sLabel.Format(_T("Raise %d.%02d"), nAmount/100, nAmount%100);
	else
		sLabel.Format(_T("Bet %d.%02d"), nAmount/100, nAmount%100);
	SetActionButtonInfo(2, sLabel, nAmount, true);
	// }}
	return 0L;
	}

LRESULT
PokerTableWnd::OnPreActionChecked(WPARAM wParam, LPARAM lParam){
	int							nId			= wParam;
	ESChildControlPreAction*	pPreAction	= (ESChildControlPreAction*)lParam;
	if( !pPreAction )			return 0L;
	bool						bCheckState = pPreAction->GetCheck();
	PreActionButtonInfo*		pInfo		= GetPreActionInfo(nId);
	if( pInfo && m_pHandler ){
		m_pHandler->OnPreActionButtonChecked(pInfo, bCheckState);
		//RemovePreActionButton(pInfo->type, true);
		//SetPreActionButtonLabel(pInfo->type, _T("Changed"), true);
		//ClearPreActions();
		}
	return 0L;
	}

bool
PokerTableWnd::AddShortcutButton(CString sLabel, int nAmount, bool bInvalidate /*= true*/){
	ShortcutButtonInfo* pInfo = new ShortcutButtonInfo();
	pInfo->sLabel		= sLabel;
	pInfo->nAmount		= nAmount;
	pInfo->nButtonId	= m_listShortcutButtons.GetCount();
	m_listShortcutButtons.Add(pInfo);

	ESChildControl*				pActionPanel	= GetChildControl(CHILD_PokerActionPanel);
	ESChildControlShortcutBtn*	pShortcutButton	= new ESChildControlShortcutBtn();
	
	CRect rcButton;
	rcButton.left			= (m_pGUI->m_ptShortcutButton.x) + (m_pGUI->m_szShortcutButton.cx + 2)*pInfo->nButtonId;
	rcButton.top			= m_pGUI->m_ptShortcutButton.y;
	rcButton.right			= rcButton.left + m_pGUI->m_szShortcutButton.cx;
	rcButton.bottom			= rcButton.top + m_pGUI->m_szShortcutButton.cy;

	pInfo->nButtonId		+= CHILD_ShortcutButton;
	if( AddChildControlEx(pShortcutButton, pInfo->nButtonId, rcButton, pActionPanel) ){
		pShortcutButton->SetText		(sLabel, bInvalidate);
		return true;
		}
	return false;
	} 

bool
PokerTableWnd::ClearShortcutButtons(bool bInvalidate /*= true*/){
	int nCt		= m_listShortcutButtons.GetCount();
	int nLoop	= 0;

	while( nLoop < nCt ){
		ESChildControl*	pShortcutButton = GetChildControl(CHILD_ShortcutButton + nLoop);
		if( pShortcutButton ){
			if( bInvalidate )
				pShortcutButton->SetVisible(false, bInvalidate);
			RemoveChildControl(pShortcutButton);
			}
		nLoop ++;
		}
	m_listShortcutButtons.RemoveAll();
	return true;
	}

bool
PokerTableWnd::RedrawShortcutButtons(){
	int nCt		= m_listShortcutButtons.GetCount();
	int nLoop	= 0;

	while( nLoop < nCt ){
		ESChildControl*	pShortcutButton = GetChildControl(CHILD_ShortcutButton + nLoop);
		if( pShortcutButton ){
			pShortcutButton->Redraw();
			}
		nLoop ++;
		}
	return true;
	}

bool
PokerTableWnd::SetSliderAmount(int nAmount, bool bInvalidate /*= true*/){
	ESChildControlSlider*	pSlider			= (ESChildControlSlider*)GetChildControl(CHILD_Slider);
	if( !pSlider )
		return false;
	return pSlider->SetSliderPos(nAmount, bInvalidate);
	}

bool
PokerTableWnd::ShowSlider(int nAmount, int nAmountMin, int nAmountMax, int nAmountStep, bool bInvalidate /*= true*/){
	ESChildControl*			pActionPanel	= GetChildControl(CHILD_PokerActionPanel);
	ESChildControlSlider*	pSlider			= (ESChildControlSlider*)GetChildControl(CHILD_Slider);
	if( !pSlider ){
		pSlider					= new ESChildControlSlider();

		CRect rcSlider;
		rcSlider.left			= m_pGUI->m_ptSlider.x;
		rcSlider.top			= m_pGUI->m_ptSlider.y;
		rcSlider.right			= rcSlider.left + m_pGUI->m_szSlider.cx;
		rcSlider.bottom			= rcSlider.top + m_pGUI->m_szSlider.cy;
		AddChildControlEx(pSlider, CHILD_Slider, rcSlider, pActionPanel); 
		}

	pSlider->SetupSlider	(nAmountMin, nAmountMax, nAmountStep, false);
	pSlider->SetSliderPos	(nAmount, false);
	pSlider->SetVisible		(true, false);
	if( bInvalidate )
		pSlider->Redraw();
	return true;
	}

bool
PokerTableWnd::AddChildControlEx(ESChildControl* pChild, int nId, CRect rcControl, ESChildControl* pParent){
	float fPosX				= (rcControl.left / ((float)m_pGUI->m_szDefWindowSize.cx));
	float fPosY				= (rcControl.top / ((float)m_pGUI->m_szDefWindowSize.cy));
	float fCX				= rcControl.Width() / ((float)m_pGUI->m_szDefWindowSize.cx);
	float fCY				= rcControl.Height() / ((float)m_pGUI->m_szDefWindowSize.cy);

	if( AddChildControl(pChild, nId, CRect(0, 0, 1, 1), pParent) ){
		CRect rcPokerWnd;
		GetClientRect(rcPokerWnd);
		pChild->SetVisible		(true, false);
		pChild->SetLogicalPos	(fPosX, fPosY);
		pChild->SetLogicalSize	(fCX, fCY);
		((ESChildControl*)pChild)->OwnerWindowSizeChanged(rcPokerWnd.Width(), rcPokerWnd.Height());
		return true;
		}
	return false;
	}

bool
PokerTableWnd::HideSlider(bool bInvalidate /*= true*/){
	ESChildControl*		pSlider	= GetChildControl(CHILD_Slider);
	if( !pSlider ) return false;
	pSlider->SetVisible(false, bInvalidate);
	return true;
	}

bool
PokerTableWnd::AddPreActionButton(PreActionButton preAction, int nValue, CString sLabel, bool bCheckState, bool bInvalidate){
	PokerGUI* pGUI = PokerGUI::GetInstance();
	CPoint pos;
	if( !pGUI->GetPreActionPosition(preAction, pos) )
		return false;

	ESChildControl*	pChildExisted	= GetChildControl(CHILD_PreAction + (int)preAction);
	if( pChildExisted ){
		int nId		= pChildExisted->GetId();
		int nLoop	= 0;
		int nCt		= m_listPreActions.GetCount();

		while( nLoop < nCt ){
			PreActionButtonInfo* pInfo = m_listPreActions[nLoop];
			if( pInfo && pInfo->nButtonId == nId ){
				pInfo->nValue = nValue;
				pInfo->sLabel = sLabel;
				break;
				}
			nLoop ++;
			}

		pChildExisted->SetVisible(true, false);
		((ESChildControlPreAction*)pChildExisted)->SetCheck(bCheckState, false);
		((ESChildControlPreAction*)pChildExisted)->SetText(sLabel, bInvalidate);
		return true;
		}

	ESChildControl*				pActionPanel	= GetChildControl(CHILD_PokerActionPanel);
	ESChildControlPreAction*	pPreAction		= new ESChildControlPreAction();
	ESChildControl*				pParent			= NULL;

	PreActionButtonInfo* pInfo = new PreActionButtonInfo();
	pInfo->sLabel		= sLabel;
	pInfo->type			= preAction;
	pInfo->nButtonId	= CHILD_PreAction + (int)preAction;
	pInfo->ptPos		= pos;
	pInfo->nValue		= nValue;	
	m_listPreActions.Add(pInfo);

	CRect rcPreAction;
	rcPreAction.left		= pos.x;
	rcPreAction.top			= pos.y;
	rcPreAction.right		= rcPreAction.left + m_pGUI->m_szPreAction.cx;
	rcPreAction.bottom		= rcPreAction.top + m_pGUI->m_szPreAction.cy;

	if( pActionPanel->GetClientRect().PtInRect(pos) )
		pParent = pActionPanel;

	if( AddChildControlEx(pPreAction, pInfo->nButtonId, rcPreAction, pParent) ){
		pPreAction->SetCheck		(bCheckState, false);
		pPreAction->SetText			(sLabel, false);
		pPreAction->SetVisible		(true, bInvalidate);
		return true;
		}
	return false;
	}

bool
PokerTableWnd::RemovePreActionButton(PreActionButton preAction, bool bInvalidate){
	ESChildControl*	 pPreAction	= GetChildControl(CHILD_PreAction + (int)preAction);
	if( !pPreAction ){
		return false;
		}

	int nId		= pPreAction->GetId();
	int nLoop	= 0;
	int nCt		= m_listPreActions.GetCount();

	while( nLoop < nCt ){
		PreActionButtonInfo* pInfo = m_listPreActions[nLoop];
		if( pInfo && pInfo->nButtonId == nId ){
			m_listPreActions.RemoveAt(nLoop);
			break;
			}
		nLoop ++;
		}

	pPreAction->SetVisible(false, bInvalidate);
	RemoveChildControl(pPreAction);
	return true;
	}

bool
PokerTableWnd::SetPreActionButtonLabel(PreActionButton preAction, CString sLabel, bool bInvalidate /*= true*/){
	ESChildControlPreAction*	 pPreAction	= (ESChildControlPreAction*)GetChildControl(CHILD_PreAction + (int)preAction);
	if( !pPreAction )
		return false;
	int						nId		= pPreAction->GetId();
	PreActionButtonInfo*	pInfo	= GetPreActionInfo(nId);
	if( !pInfo )
		return false;

	pInfo->sLabel = sLabel;
	pPreAction->SetText(sLabel, bInvalidate);
	return true;
	}

bool
PokerTableWnd::SetPreActionCheckState(PreActionButton preAction, bool bCheckState, bool bInvalidate /*= true*/){
	ESChildControlPreAction*	 pPreAction	= (ESChildControlPreAction*)GetChildControl(CHILD_PreAction + (int)preAction);
	if( !pPreAction ){
		return false;
		}
	pPreAction->SetCheck(bCheckState, bInvalidate);
	return true;
	}

bool
PokerTableWnd::GetPreActionCheckState(PreActionButton preAction){
	ESChildControlPreAction*	 pPreAction	= (ESChildControlPreAction*)GetChildControl(CHILD_PreAction + (int)preAction);
	if( !pPreAction )
		return false;
	return pPreAction->GetCheck();
	}

bool
PokerTableWnd::ClearPreActions(bool bInvalidate /*= true*/){
	int nLoop	= 0;
	int nCt		= m_listPreActions.GetCount();

	while( nLoop < nCt ){
		PreActionButtonInfo* pInfo = m_listPreActions[nLoop];
		if( pInfo ){
			ESChildControlPreAction*	 pPreAction	= (ESChildControlPreAction*)GetChildControl(pInfo->nButtonId);
			if( pPreAction ){
				pPreAction->SetVisible(false, bInvalidate);
				RemoveChildControl(pPreAction);
				}
			}
		nLoop ++;
		}
	return true;
	}

bool
PokerTableWnd::RedrawPreActions(){
	int nLoop	= 0;
	int nCt		= m_listPreActions.GetCount();

	while( nLoop < nCt ){
		PreActionButtonInfo* pInfo = m_listPreActions[nLoop];
		if( pInfo ){
			ESChildControlPreAction* pPreAction	= (ESChildControlPreAction*)GetChildControl(pInfo->nButtonId);
			if( pPreAction ){
				pPreAction->Redraw();
				}
			}
		nLoop ++;
		}
	return true;
	}

bool
PokerTableWnd::RedrawPreActionButton(PreActionButton preAction){
	ESChildControlPreAction* pPreAction	= (ESChildControlPreAction*)GetChildControl(CHILD_PreAction + (int)preAction);
	if( pPreAction ){
		pPreAction->Redraw();
		return true;
		}
	return false;
	}

PreActionButtonInfo*
PokerTableWnd::GetPreActionInfo(int nId){
	int nLoop	= 0;
	int nCt		= m_listPreActions.GetCount();

	while( nLoop < nCt ){
		PreActionButtonInfo* pInfo = m_listPreActions[nLoop];
		if( pInfo && pInfo->nButtonId == nId ){
			return pInfo;
			}
		nLoop ++;
		}
	return NULL;
	}

ESChildControlSeat*
PokerTableWnd::GetSeatControl(int nSeat){
	int					nId			= ChildControls::CHILD_Seat + nSeat;
	ESChildControlSeat* pControl	= (ESChildControlSeat*)GetChildControl(nId);
	return pControl;
	}

ESChildControlSeatCards*
PokerTableWnd::GetSeatCardsControl(int nSeat){
	int							nId			= ChildControls::CHILD_SeatCards + nSeat;
	ESChildControlSeatCards*	pControl	= (ESChildControlSeatCards*)GetChildControl(nId);
	return pControl;
	}

ESChildControlSeatProgressBar*
PokerTableWnd::GetSeatProgressControl(int nSeat){
	int								nId			= ChildControls::CHILD_SeatProgressBar + nSeat;
	ESChildControlSeatProgressBar*	pControl	= (ESChildControlSeatProgressBar*)GetChildControl(nId);
	return pControl;
	}

ESChildControlChips*
PokerTableWnd::GetChipsControl(int nSeat){
	int					nId			= ChildControls::CHILD_SeatChips + nSeat;
	ESChildControlChips* pControl	= (ESChildControlChips*)GetChildControl(nId);
	return pControl;
	}

ESChildControlDealer*
PokerTableWnd::GetSeatDealerControl	(int nSeat){
	int					nId			= ChildControls::CHILD_SeatDealer + nSeat;
	ESChildControlDealer* pControl	= (ESChildControlDealer*)GetChildControl(nId);
	return pControl;
	}

ESChildControlTableCards*
PokerTableWnd::GetTableCardsControl(){
	int							nId			= ChildControls::CHILD_PokerTableCards;
	ESChildControlTableCards*	pControl	= (ESChildControlTableCards*)GetChildControl(nId);
	return pControl;
	}

bool
PokerTableWnd::RedrawSeat(int nSeat){
	ESChildControlSeat* pSeatCtrl = GetSeatControl(nSeat);
	if( !pSeatCtrl )
		return false;
	pSeatCtrl->Redraw();
	return true;
	}

bool
PokerTableWnd::RedrawSeatChips(int nSeat){
	ESChildControlChips* pChipsCtrl = GetChipsControl(nSeat);
	if( !pChipsCtrl )
		return false;
	pChipsCtrl->Redraw();
	return true;
	}