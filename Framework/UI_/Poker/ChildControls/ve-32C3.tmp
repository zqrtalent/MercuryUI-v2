// ESChildHistoryView.cpp : implementation file
//

#include "stdafx.h"
#include "..\..\..\Image\ImageHelper.h"
#include "..\PokerGUI.h"
#include "ESChildHistoryView.h"
#include "ESChildScrollBar.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// ESChildHistoryView

ESChildHistoryView::ESChildHistoryView() : ESChildScrollView() {
	m_crRow1		= RGB(212, 223, 232);
	m_crRow2		= RGB(255, 255, 255);
	m_nLineHeight	= 24;
	// No indexing needed.
	m_arrItems.SetCompareFunction(AutoSortedArray::CompareEmpty);

	m_history.Deserialize(_T("c:\\history.ser"));

	int nLoop = 0;
	while( nLoop < m_history.m_itemHeaders.GetCount() ){
		PokerSimpleHistoryItemHeader* pHeader = m_history.m_itemHeaders.GetAt(nLoop);
		// Header item.
		m_arrItems.Add((long)pHeader, (long)HistoryItemHeader);

		int nLoop1 = 0;
		while( nLoop1 < pHeader->m_items.GetCount() ){
			PokerSimpleHistoryItem* pItem = pHeader->m_items.GetAt(nLoop1);
			// Player item.
			m_arrItems.Add((long)pItem, (long)HistoryItemPlayer);
			nLoop1 ++;
			}

		// Separator item.
		m_arrItems.Add(0, (long)HistoryItemSeparator);
		nLoop ++;
		}


	m_szView.SetSize(120, m_nLineHeight*m_arrItems.GetCount());
	}

ESChildHistoryView::~ESChildHistoryView(){
	}

bool
ESChildHistoryView::Create(int nId, CRect rcRect, MercuryBaseView* pOwner, ESChildControl* pParent){
	bool bRet = ESChildScrollView::Create(nId, rcRect, pOwner, pParent);
	return bRet;
	}

bool
ESChildHistoryView::SetPos(int x, int y, bool bRedraw){
	ESChildScrollView::SetPos(x, y, bRedraw);
	return true;
	}

bool
ESChildHistoryView::SetSize(int cx, int cy, bool bRedraw){
	ESChildScrollView::SetSize(cx, cy, bRedraw);
	return true;
	}

bool
ESChildHistoryView::Destroy(){
	ESChildScrollView::Destroy();
	return true;
	}

void
ESChildHistoryView::OwnerWindowSizeChanged(int cx, int cy){
	ESChildScrollView::OwnerWindowSizeChanged(cx, cy);
	}

// ========================================================
//
//	Event methods.
//
// ========================================================

void
ESChildHistoryView::OnPaintClient(CDC* pDC, CRect* pRectDC, CRect* pRectClient){
	int nScrollCXCY	= ESChildScrollBar::GetScrollCXCY();
	CRect	rcView;
	rcView.left			= m_rcRect.left;
	rcView.top			= m_rcRect.top;
	rcView.right		= m_pVScroll->IsVisible() ? m_rcRect.right - nScrollCXCY : m_rcRect.right;
	rcView.bottom		= rcView.top + m_rcRect.Height();

	PokerGUI*	pGUI	= PokerGUI::GetInstance();
	CFont*		pFont	= pGUI->m_pHistoryWindowFont;
	COLORREF	crText	= pGUI->m_crHistoryListText;
	CString		str;

	CBrush brush1(m_crRow1);
	CBrush brush2(m_crRow2);
	CBrush* pBrush[]		= {&brush1, &brush2};

	CRect	rcViewDC, rcInvalid;
	rcViewDC.left		= (rcView.left - pRectClient->left) + pRectDC->left; 
	rcViewDC.top		= (rcView.top - pRectClient->top) + pRectDC->top; 
	rcViewDC.right		= rcViewDC.left + rcView.Width(); 
	rcViewDC.bottom		= rcViewDC.top + rcView.Height(); 

	int		nVScrollPos	= m_pVScroll->GetScrollPos();
	int		nLoop		= (nVScrollPos / m_nLineHeight);
	int		nTopRow		= nLoop;
	int		nCt			= m_arrItems.GetCount();
	int		nWidth		= 0;
	int		nOffsetY	= nVScrollPos % m_nLineHeight;
	int		nOffsetX	= 0;

	CRect rcItemDC;
	rcItemDC.left		= rcViewDC.left;
	rcItemDC.top		= rcViewDC.top - nOffsetY;
	rcItemDC.right		= rcViewDC.right;
	rcItemDC.bottom		= rcItemDC.top + m_nLineHeight;

	while( rcItemDC.top < rcViewDC.bottom ){
		rcInvalid = rcItemDC & rcViewDC;
		if( rcInvalid.IsRectEmpty() ){
			rcItemDC.top		+= m_nLineHeight;
			rcItemDC.bottom		= min(rcItemDC.top + m_nLineHeight, rcViewDC.bottom);
			nOffsetY			+= m_nLineHeight;
			nLoop				++;
			continue;
			}
/*
		// Fill row with color.
		if( nLoop == m_nSelectedRow )
			pDC->FillRect(rcInvalid, &brush3);
		else
			pDC->FillRect(rcInvalid, pBrush[(nLoop - m_nTopRow) % 2]);
		*/
		// Fill row.
		pDC->FillRect(rcInvalid, pBrush[(nLoop - nTopRow) % 2]);

		// Skip row rendering.
		if( nLoop >= nCt ){
			nOffsetY	+= m_nLineHeight;
			nLoop		++;
			continue;
			}

		HistoryItemType itemType = (HistoryItemType)m_arrItems.GetData(nLoop);
		switch( itemType ){
			case HistoryItemType::HistoryItemHeader:
				{
					str.Format();
					break;
				}
			case HistoryItemType::HistoryItemPlayer:
				{
					break;
				}
			case HistoryItemType::HistoryItemSeparator:
				{
					break;
				}
			};

		/*
		CRect rcCellDC;		
		rcCellDC.left	= rcItemDC.left;
		rcCellDC.top	= rcItemDC.top;
		rcCellDC.right	= rcItemDC.right;
		rcCellDC.bottom	= rcItemDC.bottom;

		CFont* pFontOld = pDC->SelectObject(pGUI->m_pLobbyTabFont);
		pDC->SetBkMode		(TRANSPARENT);
		pDC->SetTextColor	(crText);

		// Draw item label. {{
		CSize	szText;
		CString sText		= m_arrContents.GetAt(nLoop);
		ImgHlp::GetTextSize	(&sText, pGUI->m_pLobbyTabFont, szText);
		CPoint ptLabel		(max(rcCellDC.left, rcViewDC.left) + 2, rcCellDC.top + (rcCellDC.Height() - szText.cy)/2);
		pDC->ExtTextOut		(ptLabel.x, ptLabel.y, ETO_CLIPPED, rcCellDC, sText.GetBuffer(), NULL);
		// }}

		pDC->SelectObject	(pFontOld);
		*/

		rcItemDC.top		+= m_nLineHeight;
		rcItemDC.bottom		= min(rcItemDC.top + m_nLineHeight, rcViewDC.bottom);
		nLoop				++;
		}

	brush1.DeleteObject();
	brush2.DeleteObject();
	}

void	
ESChildHistoryView::OnMouseHover(CPoint pt, UINT nFlags){
	}

BOOL	
ESChildHistoryView::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message){
	return FALSE;
	}

void
ESChildHistoryView::OnLButtonDown(CPoint pt, UINT nFlags){
	m_bMouseDown	= true;
	}

void
ESChildHistoryView::OnLButtonUp(CPoint pt, UINT nFlags){
	m_bMouseDown = false;
	}

void	
ESChildHistoryView::OnLButtonClick(CPoint pt, UINT nFlags){
	}

void	
ESChildHistoryView::OnRButtonClick(CPoint pt, UINT nFlags){
	}

void	
ESChildHistoryView::OnMButtonClick(CPoint pt, UINT nFlags){
	}

void	
ESChildHistoryView::OnLButtonDblClick(CPoint pt, UINT nFlags){
	}

void	
ESChildHistoryView::OnRButtonDblClick(CPoint pt, UINT nFlags){
	}

void	
ESChildHistoryView::OnMButtonDblClick(CPoint pt, UINT nFlags){
	}