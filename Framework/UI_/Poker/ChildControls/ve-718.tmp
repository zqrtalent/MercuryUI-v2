// ESTextFormatLabel.cpp : implementation file
//

#include "stdafx.h"
#include "..\..\..\Image\ImageHelper.h"
#include "..\..\..\String\StringDecoder.h"
#include "..\PokerGUI.h"
#include "ESChildControlTextEdit.h"
#include "ESTextFormatLabel.h"
#include "ESChildScrollBar.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// ESTextFormatLabel

ESTextFormatLabel::ESTextFormatLabel() : ESChildControl(){
	m_crFill			= RGB(255, 255, 255);
	m_pRootLine			= new RenderLine();
	m_pLastLine			= NULL;
	m_nContentHeight	= 0;
	/*
	m_nItemHeight	= 16;
	m_nTopLine		= 0;
	m_pVScroll		= NULL;
	m_pEdit			= NULL;
	m_bChatEdit		= true;
	m_bCenterAlign	= false;*/
	}

ESTextFormatLabel::~ESTextFormatLabel(){
	}

bool
ESTextFormatLabel::Create(int nId, CRect rcRect, MercuryBaseView* pOwner, ESChildControl* pParent){
	bool bRet = ESChildControl::Create(nId, rcRect, pOwner, pParent);
	if( bRet ){
		/*
		PokerGUI* pGUI = PokerGUI::GetInstance();
		if( m_bChatEdit ){
			CRect rcTextEdit;
			rcTextEdit.left		= m_rcRect.left;
			rcTextEdit.top		= m_rcRect.bottom - pGUI->m_nChatEditHeight;
			rcTextEdit.right	= m_rcRect.right;
			rcTextEdit.bottom	= rcTextEdit.top + pGUI->m_nChatEditHeight;
			m_pEdit				= new ESChildControlTextEdit();
			m_pEdit->SetSizeAutoCalculation	(false);
			m_pEdit->SetFont				(pGUI->m_pTMessageFont);
			pOwner->AddChildControl(m_pEdit, CHILD_Table_Chat_Edit, rcTextEdit, this); 
			rcRect.bottom		-= pGUI->m_nChatEditHeight;
			}

		int nScrollCXCY = ESChildScrollBar::GetScrollCXCY();
		CRect rcVScroll;
		rcVScroll.left		= rcRect.right - nScrollCXCY;
		rcVScroll.top		= rcRect.top;
		rcVScroll.right		= rcVScroll.left + nScrollCXCY;
		rcVScroll.bottom	= rcRect.bottom;

		m_pVScroll = new ESChildScrollBar();
		pOwner->AddChildControl(m_pVScroll, MercuryBaseView::GetChildControlIdUnused(m_pOwner), rcVScroll, this);
		if( !m_pVScroll->SetScrollInfo(0, m_listChatItems.GetCount()*m_nItemHeight, rcRect.Height(), false) )
			m_pVScroll->SetVisible(false, false);
		else{
			m_pVScroll->SetVisible(IsVisible(), false);
			}
			*/
		}
	return bRet;
	}

bool
ESTextFormatLabel::SetPos(int x, int y, bool bRedraw){
	ESChildControl::SetPos(x, y, bRedraw);
	return true;
	}

bool
ESTextFormatLabel::SetSize(int cx, int cy, bool bRedraw){
	ESChildControl::SetSize(cx, cy, bRedraw);
	return true;
	}

bool
ESTextFormatLabel::Destroy(){
	ESChildControl::Destroy();
	m_pVScroll = NULL;
	return true;
	}

void
ESTextFormatLabel::OwnerWindowSizeChanged(int cx, int cy){
	ESChildControl::OwnerWindowSizeChanged(cx, cy);

	/*
	PokerGUI* pGUI		= PokerGUI::GetInstance();
	int nScrollCXCY		= ESChildScrollBar::GetScrollCXCY();;
	
	CRect rcVScroll;
	rcVScroll.left		= m_rcRect.right - nScrollCXCY;
	rcVScroll.top		= m_rcRect.top;
	rcVScroll.right		= rcVScroll.left + nScrollCXCY;
	rcVScroll.bottom	= m_rcRect.bottom -  (m_bChatEdit ? pGUI->m_nChatEditHeight : 0);
	
	m_pVScroll->SetPos	(rcVScroll.left, rcVScroll.top, false);
	m_pVScroll->SetSize	(rcVScroll.Width(), rcVScroll.Height(), false);
	RecalcVScroll(false);

	if( m_pEdit ){
		CRect rcTextEdit;
		rcTextEdit.left		= m_rcRect.left;
		rcTextEdit.top		= m_rcRect.bottom - pGUI->m_nChatEditHeight;
		rcTextEdit.right	= m_rcRect.right;
		rcTextEdit.bottom	= rcTextEdit.top + pGUI->m_nChatEditHeight;
		m_pEdit->SetPos		(rcTextEdit.left, rcTextEdit.top, false);
		m_pEdit->SetSize	(rcTextEdit.Width(), rcTextEdit.Height(), false);
		}*/
	}

bool
ESTextFormatLabel::IsScrollBarVisible(ESChildControl* pScrollBar){
	/*
	if( pScrollBar == m_pVScroll && m_pVScroll ){
		PokerGUI* pGUI	= PokerGUI::GetInstance();
		return m_pVScroll->SetScrollInfo(0, m_listChatItems.GetCount()*m_nItemHeight, (m_rcRect.Height() - (m_bChatEdit ? pGUI->m_nChatEditHeight : 0)), false);
		}*/
	return false;
	}

void
ESTextFormatLabel::RecalcVScroll(bool bInvalidate){
	/*
	if( !m_pVScroll ) return;
	PokerGUI* pGUI	= PokerGUI::GetInstance();
	if( !m_pVScroll->SetScrollInfo(0, m_listChatItems.GetCount()*m_nItemHeight, (m_rcRect.Height() - (m_bChatEdit ? pGUI->m_nChatEditHeight : 0)), false) ){
		m_pVScroll->SetVisible(false, false);
		}
	else{
		if( !m_pVScroll->IsVisible() ){
			m_pVScroll->SetVisible(IsVisible(), bInvalidate);
			}
		}
	if( m_pVScroll->IsVisible() && bInvalidate )
		m_pVScroll->Redraw(true);
		*/
	}
/*
int
ESTextFormatLabel::SplitText(CString& sText, CStringArray& arrStrings){
	
	const CString sCardTypes[]	= {_T("C"), _T("D"), _T("S"), _T("H")};
	const CString sCardRank[]	= {_T("2"), _T("3"), _T("4"), _T("5"), _T("6"), _T("7"), _T("8"), _T("9"), _T("T"), _T("J"), _T("Q"), _T("K"), _T("A")};
	int nFind	= 0;
	int nStart	= 0;
	int nLastSavedIdx = 0;
	CString str;
	while( nFind != -1 ){
		nFind = sText.Find('^', nStart);
		if( nFind != -1 && (nFind + 3) <= sText.GetLength() ){
			str	= sText.Mid(nFind, 3);
			str.MakeUpper();
			char cCardType = str.GetAt(2);
			char cCardRank = str.GetAt(1);

			bool bSuccess = false;
			int nLoop = 0;
			while( nLoop < sizeof(sCardRank)/sizeof(CString) ){
				if( cCardRank == sCardRank[nLoop] ){
					str.SetAt(0, '^');
					str.SetAt(1, '0' + (char)nLoop);
					nLoop = 0;
					while( nLoop < sizeof(sCardTypes)/sizeof(CString) ){
						if( cCardType == sCardTypes[nLoop] ){
							bSuccess = true;
							str.SetAt(2, '0' + (char)nLoop);
							break;
							}
						nLoop ++;
						}
					break;
					}
				nLoop ++;
				}

			if( bSuccess ){
				arrStrings.Add(sText.Mid(nLastSavedIdx, nFind - nLastSavedIdx));
				arrStrings.Add(str);
				nStart			= nFind + 3;
				nLastSavedIdx	= nStart;
				}
			else
				nStart = nFind + 1;
			}
		else{
			nFind	= -1;
			str		= sText.Mid(nStart, sText.GetLength() - nStart);
			arrStrings.Add(str);
			}
		}
	return (int)arrStrings.GetCount();
	return 0;
	}
*/
void
ESTextFormatLabel::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt){
	/*
	int nOffset = (zDelta / 120)*m_nItemHeight;
	if( m_pVScroll->IsVisible() ){
		m_pVScroll->SetScrollPos(m_pVScroll->GetScrollPos() - nOffset, true);
		}*/
	}

bool
ESTextFormatLabel::OnScrollBarEvent(bool bVScroll, int nCode, ESChildControl* pSender){
	/*
	ESChildScrollBar* pScrollBar = (ESChildScrollBar*)pSender;
	bool bRet = true;
	switch( nCode ) {
		case SB_LINEDOWN:
			{
				pScrollBar->SetScrollPos(pScrollBar->GetScrollPos() + m_nItemHeight, true);
				break;
			}
		case SB_LINEUP:
			{
				pScrollBar->SetScrollPos(pScrollBar->GetScrollPos() - m_nItemHeight, true);
				break;
			}
		case SB_PAGEDOWN:
			{
				pScrollBar->SetScrollPos(pScrollBar->GetScrollPos() + pScrollBar->GetScrollPage(), true);
				break;
			}
		case SB_PAGEUP:
			{
				pScrollBar->SetScrollPos(pScrollBar->GetScrollPos() - pScrollBar->GetScrollPage(), true);
				break;
			}
		case SB_THUMBTRACK:
			{
				break;
			}
		};

	if( bRet ){
		int nScrollPos = pScrollBar->GetScrollPos();
		m_nTopLine	= nScrollPos / m_nItemHeight;
		PokerGUI* pGUI		= PokerGUI::GetInstance();

		int		nScrollCXCY = ESChildScrollBar::GetScrollCXCY();;
		CRect	rcRedraw;
		rcRedraw.left		= m_rcRect.left;
		rcRedraw.top		= m_rcRect.top;
		rcRedraw.right		= m_pVScroll->IsVisible() ? m_rcRect.right - nScrollCXCY : m_rcRect.right;
		rcRedraw.bottom		= rcRedraw.top + m_rcRect.Height() - (m_bChatEdit ? pGUI->m_nChatEditHeight : 0);
		m_pOwner->RedrawRect(rcRedraw, 1);
		}
	return bRet;*/ return false;
	}

// ========================================================
//
//	Event methods.
//
// ========================================================

void
ESTextFormatLabel::OnPaintClient(CDC* pDC, CRect* pRectDC, CRect* pRectClient){
	PokerGUI* pGUI	= PokerGUI::GetInstance();
	int nScrollCXCY = ESChildScrollBar::GetScrollCXCY();

	CRect	rcControlDC, rcInvalid;
	rcControlDC.left	= (m_rcRect.left - pRectClient->left) + pRectDC->left; 
	rcControlDC.top		= (m_rcRect.top - pRectClient->top) + pRectDC->top; 
	rcControlDC.right	= rcControlDC.left + m_rcRect.Width(); 
	rcControlDC.bottom	= rcControlDC.top + m_rcRect.Height(); 


	// Fill background.
	rcInvalid = *pRectDC&rcControlDC;
	if( !rcInvalid.IsRectEmpty() )
		pDC->FillSolidRect(rcInvalid, m_crFill);

	CPoint ptOffset(rcControlDC.left, rcControlDC.top);
	CRect rcLineDC, rcDrawDC;

	RenderLine* pLine = m_pRootLine->m_pNextLine;
	while( pLine ){
		rcLineDC.left	= ptOffset.x;
		rcLineDC.top	= ptOffset.y;
		rcLineDC.right	= rcLineDC.left + pLine->m_szLine.cx;
		rcLineDC.bottom	= rcLineDC.top + pLine->m_szLine.cy;

		rcDrawDC	= *pRectDC&rcLineDC;
		if( !rcDrawDC.IsRectEmpty() )
			pLine->Draw(pDC, rcLineDC, rcDrawDC);

		pLine		= pLine->m_pNextLine;
		ptOffset.y += rcLineDC.Height();
		}

	/*
	int		nLoop		= m_nTopLine;
	int		nOffsetX	= 0;
	int		nOffsetY	= (m_pVScroll && m_pVScroll->IsVisible()) ? m_pVScroll->GetScrollPos()%m_nItemHeight : 0;
	CSize	szText;

	bool	bCenter		= m_bCenterAlign;
	bool	bCalcSize	= false;
	bool	bSizeCalculated	= false;

	pDC->SetBkMode(TRANSPARENT);
	while( nLoop < m_listChatItems.GetCount() ){
		ESChatItem* pItem = m_listChatItems.GetAt(nLoop);
		if( !pItem || !pItem->pTag ){
			nLoop ++;
			continue;
			}

_render:
		CRect rcItemDC;
		rcItemDC.left			= rcPageDC.left;
		rcItemDC.top			= rcPageDC.top + ((nLoop - m_nTopLine)*m_nItemHeight) - nOffsetY;
		rcItemDC.right			= rcPageDC.right;
		rcItemDC.bottom			= rcItemDC.top + m_nItemHeight;

		if( rcItemDC.top >= rcPageDC.bottom )
			break;

		if( bCenter ){
			if( bSizeCalculated ){
				bSizeCalculated	= false;
				bCalcSize		= false;
				int nLeft		= rcItemDC.left;
				int nRight		= rcPageDC.right;
				nOffsetX		= nLeft + (nRight - nOffsetX)/2;
				}
			else{
				bCalcSize = true;
				nOffsetX =  rcItemDC.left;
				}
			}
		else
			nOffsetX =  rcItemDC.left;

		ESChatTag* pChatTag		= pItem->pTag;
		while( pChatTag ){
			CRect rcItemTagDC;
			rcItemTagDC.left	= nOffsetX;
			rcItemTagDC.top		= rcItemDC.top;
			rcItemTagDC.right	= rcItemDC.right;
			rcItemTagDC.bottom	= rcItemDC.bottom;

			if( pChatTag->dwChatType == ESCHAT_TAG_TEXT ){
				CString		sText		= ((ESChatTextTag*)pChatTag)->sText;
				CFont*		pFont		= GetFormatFont(((ESChatTextTag*)pChatTag)->dwFormatId);
				COLORREF	crText		= ((ESChatTextTag*)pChatTag)->crText;
				CPoint		ptLabel(rcItemTagDC.left, 0);

				rcInvalid = *pRectDC&rcItemTagDC;
				if( pFont ){
					CStringArray arrStrings;
					SplitText(sText, arrStrings);
												
					for(int i=0; i<arrStrings.GetCount(); i++){
						sText = arrStrings[i];
						if( sText.GetLength() == 3 && sText[0] == '^' ){	// Render card.
							int nCardType	= (int)sText[2] - (int)'0';
							int nCardRank	= (int)sText[1] - (int)'0';
							const CString sCardRank[]	= {_T("2"), _T("3"), _T("4"), _T("5"), _T("6"), _T("7"), _T("8"), _T("9"), _T("T"), _T("J"), _T("Q"), _T("K"), _T("A")};
							CImage* pImages[] = {pGUI->m_pClubLogo_Small, pGUI->m_pDiamondLogo_Small, pGUI->m_pSpadeLogo_Small, pGUI->m_pHeartLogo_Small};
							CImage* pImage = pImages[nCardType];
							
							if( pImage ){
								// Render card image.
								CRect rcImageDC;
								rcImageDC.left		= ptLabel.x; 
								rcImageDC.top		= rcItemTagDC.top + (rcItemTagDC.Height() - pImage->GetHeight()); 
								rcImageDC.right		= rcImageDC.left + pImage->GetWidth(); 
								rcImageDC.bottom	= rcImageDC.top + pImage->GetHeight(); 

								CRect rcInvalidImageDC = rcImageDC & *pRectDC;
								if( !rcInvalidImageDC.IsRectEmpty() && !bCalcSize )
									PokerGUI::RenderImage(pDC, rcInvalidImageDC, rcImageDC, pImage, false);
								ptLabel.x += (pImage->GetWidth());

								// Render card rank name.
								CFont*	pFontOld = pDC->SelectObject(&fontCardRank);
								sText  = sCardRank[nCardRank];
								ImgHlp::GetTextSize(&sText, pFont, szText);
								ptLabel.y = rcItemTagDC.top + (rcItemTagDC.Height() - szText.cy)/2;
								if( !bCalcSize ){
									pDC->SetTextColor	(pGUI->m_crTMessageText);
									pDC->ExtTextOut		(ptLabel.x, ptLabel.y, ETO_CLIPPED, rcInvalid, sText, NULL);
									}
								pDC->SelectObject	(pFontOld);
								ptLabel.x += szText.cx;
								}
							}
						else{	// Render text.
							// Render text. {{
							CFont*	pFontOld = pDC->SelectObject	(pFont);
							ImgHlp::GetTextSize(&sText, pFont, szText);
							ptLabel.y = rcItemTagDC.top + (rcItemTagDC.Height() - szText.cy)/2;
							pDC->SetTextColor	(crText);
							if( !bCalcSize ){
								PokerGUI::ExtTextOut(pDC, ptLabel.x, ptLabel.y, ETO_CLIPPED, rcInvalid, sText);
	//							pDC->ExtTextOut		(ptLabel.x, ptLabel.y, ETO_CLIPPED, rcInvalid, sText, NULL);
								}
							pDC->SelectObject	(pFontOld);
							// }}
							ptLabel.x += szText.cx;
							}
						}	
					rcItemTagDC.right = ptLabel.x;
					
					}
				}
			else
			if( pChatTag->dwChatType == ESCHAT_TAG_IMAGE ){
				CSize		szImage	= ((ESChatImageTag*)pChatTag)->szImage;
				CImage*		pImage	= GetImageById(((ESChatImageTag*)pChatTag)->nImageId);

				if( pImage && szImage.cx > 0 && szImage.cy > 0 ){
					// Render image.
					rcItemTagDC.right	= rcItemTagDC.left + szImage.cx;

					CRect rcImageDC;
					rcImageDC.left		= rcItemTagDC.left; 
					rcImageDC.top		= rcItemTagDC.top + (rcItemTagDC.Height() - szImage.cy); 
					rcImageDC.right		= rcImageDC.left + szImage.cx; 
					rcImageDC.bottom	= rcImageDC.top + szImage.cy; 

					rcInvalid = rcImageDC & *pRectDC;
					if( !rcInvalid.IsRectEmpty() && !bCalcSize )
						PokerGUI::RenderImage(pDC, rcInvalid, rcImageDC, pImage);
					// }}
					}
				}

			nOffsetX	 = rcItemTagDC.right;
			pChatTag	 = pChatTag->pNext;
			}

		if( bCalcSize ){
			bSizeCalculated = true;
			goto _render;
			}
		nLoop		++;
		}
	fontCardRank.DeleteObject();
	*/
	}

void
RenderLine::Draw(CDC* pDC, CRect rcLine, CRect rcDraw){
	RenderItem* pItem = m_pFirstItem;

	CRect rcItem, rcInvalid;
	int nOffsetX	= rcLine.left;
	while( pItem ){
		rcItem.left		= nOffsetX;
		rcItem.top		= rcLine.top;
		rcItem.right	= rcItem.left + pItem->m_szItem.cx;
		rcItem.bottom	= rcItem.top + pItem->m_szItem.cy;

		rcInvalid = rcItem&rcDraw;
		if( !rcInvalid.IsRectEmpty() )
			pItem->Draw(pDC, rcItem, rcInvalid);

		pItem			= pItem->m_pNext;
		nOffsetX		+= rcItem.Width();
		}
	}

void
RenderItemText::Draw(CDC* pDC, CRect rcItem, CRect rcDraw){
	if( !m_pStyle ) return;
	CFont*	pFontOld	= pDC->SelectObject(m_pStyle->m_pTextFont);
	int		nBkModeOld	= pDC->SetBkMode(TRANSPARENT);
	pDC->SetTextColor(m_crText);

	CRect rcText;
	if( m_nHAlign == Alignement::HAlign_Center ){
		rcText.left		= rcItem.left + (rcItem.Width() - m_szText.cx)/2;
		rcText.right	= rcText.left + m_szText.cx;
		}
	else{
		if( m_nHAlign == Alignement::HAlign_Right ){
			rcText.left		= rcItem.right - m_szText.cx;
			rcText.right	= rcItem.right;
			}
		else{
			rcText.left		= rcItem.left;
			rcText.right	= rcItem.left + m_szText.cx;
			}
		}

	if( m_nVAlign == Alignement::VAlign_Middle ){
		rcText.top		= rcItem.top + (rcItem.Height() - m_szText.cy)/2;
		rcText.bottom	= rcText.top + m_szText.cy;
		}
	else{
		if( m_nVAlign == Alignement::VAlign_Bottom ){
			rcText.top		= rcItem.bottom - m_szText.cy;
			rcText.bottom	= rcItem.bottom;
			}
		else{
			rcText.top		= rcItem.top;
			rcText.bottom	= rcItem.top + m_szText.cy;
			}
		}

	pDC->ExtTextOut		(rcText.left, rcText.top, ETO_CLIPPED, rcDraw, m_sText, NULL);
	pDC->SetBkMode		(nBkModeOld);
	pDC->SelectObject	(pFontOld);
	}

void
RenderItemImage::Draw(CDC* pDC, CRect rcItem, CRect rcDraw){
	}

StyleBase*
ESTextFormatLabel::GetStyleByName(LPTSTR lpszName){
	UINT	nTextCode	= DecodeString(lpszName);
	int		nIndex		= m_stylesByNameCode.IndexOf(nTextCode);
	if( nIndex == -1 ) return NULL;
	return m_stylesByNameCode.GetData(nIndex);
	}

bool
ESTextFormatLabel::CalcLineSize(RenderLine* pLine){
	if( !pLine ) return false;
	CSize szLine(0, 0);
	RenderItem* pItem = pLine->m_pFirstItem;
	while( pItem ){
		szLine.cy	= max(szLine.cy, pItem->m_szItem.cy);
		szLine.cx	+= pItem->m_szItem.cx;
		pItem		= pItem->m_pNext;
		}
	pLine->m_szLine = szLine;
	return true;
	}

bool
ESTextFormatLabel::AddTextStyle(CString sName, const CString sFontName, bool bItalic, bool bUnderLine, bool bBold, int nFontHeight){
	sName.MakeLower();
	LOGFONT lf;
	memset(&lf, 0, sizeof(LOGFONT));
	lf.lfHeight			= nFontHeight;
	_tcscpy_s(lf.lfFaceName, sFontName);
	lf.lfWeight			= bBold ? FW_BOLD : FW_NORMAL;
	lf.lfCharSet		= ANSI_CHARSET;
	lf.lfItalic			= bItalic;
	lf.lfUnderline		= bUnderLine;
	lf.lfStrikeOut		= 0;
	lf.lfQuality		= PROOF_QUALITY;
	lf.lfPitchAndFamily = DEFAULT_PITCH;

	CFont* pFont		= new CFont();
	pFont->CreateFontIndirect(&lf);

	UINT nTextCode = DecodeString(sName.GetBuffer());
	if( m_stylesByNameCode.IndexOf(nTextCode) != -1 ){
		delete pFont;
		return false;
		}

	TextStyle* pStyle		= new TextStyle();
	pStyle->m_bItalic		= bItalic;
	pStyle->m_bUnderLine	= bUnderLine;
	pStyle->m_bBold			= bBold;
	pStyle->m_nFontHeight	= nFontHeight;
	pStyle->m_pTextFont		= pFont;

	m_stylesByNameCode	.Add(nTextCode, pStyle);
	m_listStyles		.Add(pStyle);
	return true;
	}

bool
ESTextFormatLabel::AddImageStyle(CString sName, CString sImageFile){
	sName.MakeLower();
	UINT	nTextCode	= DecodeString(sName.GetBuffer());
	if( m_stylesByNameCode.IndexOf(nTextCode) != -1 )
		return false;

	ImageStyle* pStyle		= new ImageStyle();
	pStyle->m_sImageFile	= sImageFile;
	pStyle->m_pImage		= PokerGUI::LoadImage(sImageFile);
	if( pStyle->m_pImage )
		pStyle->m_szImage.SetSize(pStyle->m_pImage->GetWidth(), pStyle->m_pImage->GetHeight());

	m_stylesByNameCode	.Add(nTextCode, pStyle);
	m_listStyles		.Add(pStyle);
	return true;
	}

void*
ESTextFormatLabel::AddText(CString sStyleName, CString sText, COLORREF crText, CSize szText, int nVAlign, int nHAlign, bool bRedraw){
	sStyleName.MakeLower();
	TextStyle* pStyle = (TextStyle*)GetStyleByName(sStyleName.GetBuffer());
	if( pStyle->m_nStyleType != StyleBase::StyleText ) return NULL;

	if( !m_pLastLine ){
		m_pLastLine				= new RenderLine();
		m_pRootLine->m_pNextLine= m_pLastLine;
		}

	RenderItemText* pItemNew	= new RenderItemText();
	pItemNew->m_pLine			= m_pLastLine;
	pItemNew->m_pStyle			= pStyle;
	pItemNew->m_sText			= sText;
	pItemNew->m_nHAlign			= nHAlign;
	pItemNew->m_nVAlign			= nVAlign;
	pItemNew->m_crText			= crText;
	ImageHelper::GetTextSize(&sText, pStyle->m_pTextFont, pItemNew->m_szText);

	if( szText.cx <= 0 || szText.cy <= 0 )
		pItemNew->m_szItem		= pItemNew->m_szText;
	else
		pItemNew->m_szItem		= szText;

	RenderItem* pItem = m_pLastLine->m_pFirstItem;
	if( pItem ){
		while(pItem->m_pNext)
			pItem = pItem->m_pNext;
		pItem->m_pNext		= pItemNew;
		pItemNew->m_pPrev	= pItem;
		}
	else
		m_pLastLine->m_pFirstItem = pItemNew;

	CalcLineSize(m_pLastLine);
	m_nContentHeight += m_pLastLine->m_szLine.cy;
	return NULL;
	}

bool
ESTextFormatLabel::UpdateText(void* pText, CString sText, COLORREF crText, bool bRedraw){
	return false;
	}

bool
ESTextFormatLabel::AddImage(CString sStyleName, int nWidth, int nHeight, int nVAlign, int nHAlign, bool bRedraw){
	sStyleName.MakeLower();
	ImageStyle* pStyle = (ImageStyle*)GetStyleByName(sStyleName.GetBuffer());
	if( pStyle->m_nStyleType != StyleBase::StyleImage ) return false;

	if( !m_pLastLine ){
		m_pLastLine				= new RenderLine();
		m_pRootLine->m_pNextLine= m_pLastLine;
		}

	RenderItemImage* pItemNew	= new RenderItemImage();
	pItemNew->m_pLine			= m_pLastLine;
	pItemNew->m_pStyle			= pStyle;
	pItemNew->m_nVAlign			= nVAlign;
	pItemNew->m_nHAlign			= nHAlign;
	pItemNew->m_szItem.SetSize(nWidth, nHeight);

	RenderItem* pItem = m_pLastLine->m_pFirstItem;
	if( pItem ){
		while(pItem->m_pNext){
			pItem = pItem->m_pNext;
			}
		pItem->m_pNext		= pItemNew;
		pItemNew->m_pPrev	= pItem;
		}
	else
		m_pLastLine->m_pFirstItem = pItemNew;

	CalcLineSize(m_pLastLine);
	return true;
	}

bool
ESTextFormatLabel::AddGotoNextLine(){
	RenderLine* pNewLine = new RenderLine();
	pNewLine->m_szLine.SetSize(0, 15);
	m_nContentHeight	+= pNewLine->m_szLine.cy;

	if( !m_pLastLine ){
		m_pLastLine					= pNewLine;
		m_pRootLine->m_pNextLine	= pNewLine;
		}
	else{
		m_pLastLine->m_pNextLine	= pNewLine;
		pNewLine->m_pPrevLine		= m_pLastLine;
		m_pLastLine					= pNewLine;
		}
	return true;
	}

bool
ESTextFormatLabel::AddSeparator(){
	return false;
	}

void
ESTextFormatLabel::ClearContent(){
	RenderLine* pLine = m_pRootLine->m_pNextLine;
	while( pLine ){
		RenderItem* pItem = pLine->m_pFirstItem;
		while( pItem ){
			RenderItem* pTemp = pItem->m_pNext;
			delete pItem;
			pItem = pTemp;
			}
		RenderLine* pTempLine = pLine->m_pNext;
		delete pLine;
		pLine = pTempLine;
		}

	m_pLastLine			= NULL;
	m_pTopLine			= NULL;
	m_nContentHeight	= 0;
	}

void	
ESTextFormatLabel::OnMouseHover(CPoint pt, UINT nFlags){
	}

BOOL	
ESTextFormatLabel::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message){
	return 0;
	}

void	
ESTextFormatLabel::OnMouseLeave(UINT nFlags){
	}

void	
ESTextFormatLabel::OnMouseEnter(UINT nFlags){
	}

void
ESTextFormatLabel::OnLButtonDown(CPoint pt, UINT nFlags){
	}

void
ESTextFormatLabel::OnLButtonUp(CPoint pt, UINT nFlags){
	}

void	
ESTextFormatLabel::OnLButtonClick(CPoint pt, UINT nFlags){
	}

void	
ESTextFormatLabel::OnRButtonClick(CPoint pt, UINT nFlags){
	}

void	
ESTextFormatLabel::OnMButtonClick(CPoint pt, UINT nFlags){
	}

void	
ESTextFormatLabel::OnLButtonDblClick(CPoint pt, UINT nFlags){
	}

void	
ESTextFormatLabel::OnRButtonDblClick(CPoint pt, UINT nFlags){
	}

void	
ESTextFormatLabel::OnMButtonDblClick(CPoint pt, UINT nFlags){
	}